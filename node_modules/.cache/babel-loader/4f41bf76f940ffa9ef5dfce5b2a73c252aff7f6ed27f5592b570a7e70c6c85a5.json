{"ast":null,"code":"import * as reduxToolkit from '@reduxjs/toolkit';\nconst {\n  createSlice\n} = reduxToolkit;\nconst calculate = fn => {\n  return new Function('return ' + fn)(); // eslint-disable-next-line\n};\n// hint! use state to manage not only the numbers but also the operatin state(newNum, decimal, fin)\nconst initialState = {\n  procedure: '',\n  inputOutput: '0',\n  newNum: true,\n  // for operator 清理 inputOutput\n  decimal: false,\n  // for decimal \n  finish: false,\n  // for equal \n  digitLimit: false\n};\nconst calculatorSlice = createSlice({\n  name: 'calculator',\n  initialState: initialState,\n  reducers: {\n    input: (state, action) => {\n      if (state.inputOutput.length === 22) {\n        state.digitLimit = true;\n      } else {\n        switch (action.payload) {\n          case '0':\n            if (state.finish === true) {\n              state.procedure = action.payload;\n              state.inputOutput = action.payload;\n              state.finish = false;\n            } else if (state.newNum === true) {\n              state.procedure += action.payload;\n              state.inputOutput = action.payload;\n              state.newNum = false;\n            } else if (state.inputOutput === '0') {\n              state.procedure = action.payload;\n            } else {\n              state.procedure += action.payload;\n              state.inputOutput += action.payload;\n            }\n            break;\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            if (state.finish === true) {\n              state.procedure = action.payload;\n              state.inputOutput = action.payload;\n              state.finish = false;\n            } else if (state.newNum === true) {\n              state.procedure += action.payload;\n              state.inputOutput = action.payload;\n              state.newNum = false;\n            } else if (state.inputOutput === '0') {\n              state.procedure = action.payload;\n              state.inputOutput = action.payload;\n            } else {\n              state.procedure += action.payload;\n              state.inputOutput += action.payload;\n            }\n            break;\n          default:\n            console.log('input/deafault');\n            break;\n        }\n      }\n    },\n    operator: (state, action) => {\n      state.newNum = true;\n      // fin\n      if (state.finish === true) {\n        state.procedure = state.inputOutput + action.payload;\n        state.inputOutput = action.payload;\n        state.finish = false;\n        // init\n      } else if (state.inputOutput === '0') {\n        if (['*', '/'].some(i => i === action.payload)) {} else {\n          state.procedure = action.payload;\n          state.inputOutput = action.payload;\n        }\n        // end up with opertor\n      } else if (['+', '-', '*', '/'].some(i => i === state.procedure.slice(-1))) {\n        state.procedure = state.procedure.slice(0, -1) + action.payload;\n        state.inputOutput = action.payload;\n        // default\n      } else {\n        state.procedure += action.payload;\n        state.inputOutput = action.payload;\n        state.decimal = false;\n      }\n    },\n    deciaml: (state, action) => {\n      // decimal\n      if (state.decimal === true) {\n        // fin  \n      } else if (state.finish === true) {\n        state.procedure = '0' + action.payload;\n        state.inputOutput = '0' + action.payload;\n        state.finish = false;\n        state.decimal = true;\n        // init\n      } else if (state.inputOutput === '0') {\n        state.procedure = '0' + action.payload;\n        state.inputOutput = '0' + action.payload;\n        state.decimal = true;\n        // end up with opertor\n      } else if (['+', '-', '*', '/'].some(i => i === state.procedure.slice(-1))) {\n        state.procedure += '0' + action.payload;\n        state.inputOutput = '0' + action.payload;\n        state.decimal = true;\n        state.newNum = false;\n        // default\n      } else {\n        state.procedure += action.payload;\n        state.inputOutput += action.payload;\n        state.decimal = true;\n      }\n    },\n    reset: state => {\n      state.procedure = '';\n      state.inputOutput = '0';\n      state.decimal = false;\n      state.finish = false;\n    },\n    calculate: state => {\n      if (state.procedure.search('=') === -1) {\n        // end up with opertor\n        if (['+', '-', '*', '/'].some(i => i === state.procedure.slice(-1))) {\n          state.procedure = state.procedure.slice(0, -1);\n        }\n        const answer = Math.round(calculate(state.procedure) * 100) / 100;\n        state.procedure += '=' + calculate(answer);\n        state.inputOutput = calculate(answer);\n        state.finish = true;\n        state.decimal = false;\n      }\n    },\n    setLimit: state => {\n      state.digitLimit = false;\n    }\n  }\n});\nexport default calculatorSlice;","map":{"version":3,"names":["reduxToolkit","createSlice","calculate","fn","Function","initialState","procedure","inputOutput","newNum","decimal","finish","digitLimit","calculatorSlice","name","reducers","input","state","action","length","payload","console","log","operator","some","i","slice","deciaml","reset","search","answer","Math","round","setLimit"],"sources":["/Users/zhangyu-cheng/Desktop/coding/portfolio/src/pages/123/redux/calculatorSlice.js"],"sourcesContent":["import * as reduxToolkit from '@reduxjs/toolkit'\nconst {createSlice} = reduxToolkit\n\nconst calculate = (fn) => {\n  return new Function('return ' + fn)();// eslint-disable-next-line\n}\n// hint! use state to manage not only the numbers but also the operatin state(newNum, decimal, fin)\nconst initialState = { \n  procedure: '',\n  inputOutput: '0',\n  newNum: true, // for operator 清理 inputOutput\n  decimal :false, // for decimal \n  finish: false, // for equal \n  digitLimit: false\n}\n\nconst calculatorSlice = createSlice({\n  name: 'calculator',\n  initialState: initialState,\n  reducers: {\n    input: (state, action) => {\n      if (state.inputOutput.length === 22) {\n        state.digitLimit = true\n      } else {\n        switch (action.payload) {\n          case '0':\n            if (state.finish === true) {\n              state.procedure = action.payload\n              state.inputOutput = action.payload\n              state.finish = false\n            } else if (state.newNum === true) {\n              state.procedure += action.payload\n              state.inputOutput = action.payload\n              state.newNum = false\n            } else if (state.inputOutput === '0') {\n              state.procedure = action.payload\n            } else {\n              state.procedure += action.payload\n              state.inputOutput += action.payload\n            }\n            break;\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            if (state.finish === true) {\n              state.procedure = action.payload\n              state.inputOutput = action.payload\n              state.finish = false\n            } else if (state.newNum === true) {\n              state.procedure += action.payload\n              state.inputOutput = action.payload\n              state.newNum = false\n            } else if (state.inputOutput === '0') {\n              state.procedure = action.payload\n              state.inputOutput = action.payload\n            } else {\n  \n              state.procedure += action.payload\n              state.inputOutput += action.payload\n            }\n            break;\n          default:\n            console.log('input/deafault')\n            break;\n        }\n      } \n    },\n    operator: (state, action) => {\n      state.newNum = true\n      // fin\n      if (state.finish === true) {\n        state.procedure = state.inputOutput + action.payload\n        state.inputOutput = action.payload\n        state.finish = false\n      // init\n      } else if (state.inputOutput === '0') {\n        if (['*', '/'].some((i => i===action.payload))){\n        } else {\n          state.procedure = action.payload\n          state.inputOutput = action.payload\n        }        \n      // end up with opertor\n      } else if (['+', '-', '*', '/'].some((i) => i===state.procedure.slice(-1))) {\n        state.procedure = state.procedure.slice(0,-1) + action.payload\n        state.inputOutput = action.payload\n      // default\n      } else {\n        state.procedure += action.payload\n        state.inputOutput = action.payload\n        state.decimal = false\n      }\n    },\n    deciaml: (state, action) => {\n      // decimal\n      if (state.decimal === true ) {\n      // fin  \n      } else if (state.finish === true) {\n        state.procedure = '0' + action.payload\n        state.inputOutput = '0' + action.payload\n        state.finish = false\n        state.decimal = true\n      // init\n      } else if (state.inputOutput === '0') {\n        state.procedure = '0' + action.payload\n        state.inputOutput = '0' + action.payload\n        state.decimal = true\n      // end up with opertor\n      } else if (['+', '-', '*', '/'].some((i) => i===state.procedure.slice(-1))) {\n        state.procedure += '0' + action.payload\n        state.inputOutput = '0' + action.payload\n        state.decimal = true\n        state.newNum = false\n      // default\n      } else {\n        state.procedure += action.payload\n        state.inputOutput += action.payload\n        state.decimal = true\n      }\n    },\n    reset: (state) => {\n      state.procedure = ''\n      state.inputOutput =  '0'\n      state.decimal = false\n      state.finish = false\n    },\n    calculate: (state) => {\n      if (state.procedure.search('=') === -1) {\n        // end up with opertor\n        if (['+', '-', '*', '/'].some((i) => i===state.procedure.slice(-1))){\n          state.procedure = state.procedure.slice(0,-1)\n        } \n        const answer = Math.round(calculate(state.procedure)*100)/100\n        state.procedure += '=' + calculate(answer)\n        state.inputOutput = calculate(answer)\n        state.finish = true\n        state.decimal = false\n      }\n    },\n    setLimit: (state) => {\n      state.digitLimit = false\n    }\n  }\n})\n\nexport default calculatorSlice\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}